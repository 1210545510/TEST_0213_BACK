<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-4.2.xsd
			http://www.springframework.org/schema/task
			http://www.springframework.org/schema/task/spring-task-4.2.xsd
			http://www.springframework.org/schema/aop
			http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
			http://www.springframework.org/schema/mvc
			http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">
			
	<context:component-scan base-package="com.aml">
		<context:exclude-filter type="regex"
			expression=".*Controller" />
	</context:component-scan>
	
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:core.properties</value>
				<value>classpath:env.properties</value>
				<value>classpath:snaker.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>

	<!-- 线程池 -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="5" />
		<property name="maxPoolSize" value="50" />
		<property name="queueCapacity" value="1000" />
		<!-- 线程池维护线程所允许的空闲时间，默认为60s -->
		<property name="keepAliveSeconds" value="60" />
	</bean>
	
	<!-- 注解式 -->
	<task:annotation-driven />

<!-- 	<bean id="f2cDataSource" class="org.apache.tomcat.jdbc.pool.DataSource" -->
	<bean id="f2cDataSource" class="com.aml.common.util.DataSourceRewrite"
		destroy-method="close">
		<property name="driverClassName">
			<value>${jdbc.driverClassName}</value>
		</property>
		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="maxActive">
			<value>600</value>
		</property>
		<property name="initialSize">
			<value>3</value>
		</property>
		<!-- 最大空闲时间 , mysql是 40s <property name="maxIdleTime"><value>30000</value></property> -->
		<property name="validationQuery">
			<value>SELECT 1</value>
		</property>
		<property name="testOnBorrow">
			<value>true</value>
		</property>
		<property name="testOnReturn">
			<value>true</value>
		</property>
		<property name="testWhileIdle">
			<value>true</value>
		</property>
	</bean>

	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="f2cDataSource" />
	</bean>

	<aop:config>
		<aop:pointcut id="txMethod" expression="execution(* com.aml.api.service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txMethod" />
		<aop:advisor advice-ref="txAdvice" pointcut="execution(*  org.snaker.engine.core.*.*(..)) or execution(*  org.snaker.framework.*.service..*.*(..)) or execution(* org.snaker.modules.flow.service..*.*(..))"/>
	</aop:config>
	
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- AOP切面声明事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="submit*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="create*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="do*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="set*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="remove*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
				
			<!-- snaker -->
			<tx:method name="start*" propagation="REQUIRED"/>    
			<tx:method name="execute*" propagation="REQUIRED"/>    
			<tx:method name="remove*" propagation="REQUIRED" />    
			<tx:method name="assign*" propagation="REQUIRED" />     
			<tx:method name="complete*" propagation="REQUIRED" />    
			<tx:method name="finish*" propagation="REQUIRED" />    
			<tx:method name="terminate*" propagation="REQUIRED" />     
			<tx:method name="take*" propagation="REQUIRED" />    
			<tx:method name="deploy*" propagation="REQUIRED" />    
			<tx:method name="undeploy*" propagation="REQUIRED" />
			<tx:method name="approve*" propagation="REQUIRED" />
			
			<!-- 支持当前事务，如果当前没有事务，就以非事务方式执行。只读 -->
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="query*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="search*" propagation="REQUIRED" read-only="true" />    
			<tx:method name="is*" propagation="REQUIRED" read-only="true" /> 
			<tx:method name="*" propagation="SUPPORTS" read-only="true"
				rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="f2cDataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations" value="classpath:com/aml/api/dao/mapper/*.xml" />
		<property name="typeAliasesPackage" value="org.snaker.engine.entity" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.aml.api.dao" />
	</bean>

	<!-- 工具类 -->
	<bean id="redisService" class="com.aml.common.service.RedisService"></bean>
	
	<!-- 登陆校验器 -->
	<bean id="verifyLoginFilter" class="com.aml.common.filter.VerifyLoginFilter">
		<property name="redisService" ref="redisService"></property>
	</bean>

	<import resource="redis.xml" />
	<import resource="rabbitmq.xml" />
	<import resource="spring-snaker.xml" />
	<import resource="spring-task.xml" />
</beans>